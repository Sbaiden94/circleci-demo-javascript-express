# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1


#commands:
  #destory_environment:
    #steps:
      #- run:
          #name: Destroy environment
          #when: on_fail
          #command: |
            #aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket.yml - Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file bucket.yml \
              --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}" 
      - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete
  
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
              list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
              --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - "textfile.txt"
  
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy --template-file cloudfront.yml --stack-name production-distro --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
  
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack.
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive
  #smoke_test:
    #docker:
      #- image: alpine:latest
    #steps:
      #- run: apk add --update curl
      #- run:
          #name: smoke test
          #command: |
             #return 1
      #- destory_environment
               
  #create_infrastructure:
    #docker:
      #- image: amazon/aws-cli
    #steps:
      #- checkout
      #- run:
          #name: Create Cloudformation Stack
          #command: |
            #aws cloudformation deploy \
              #--template-file template.yml \
              #--stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
              #--region us-east-1          
  #configure_infrastructure:
    #docker:
      #- image: python:3.7-alpine3.11
    #steps:
      #- checkout
      #- add_ssh_keys:
          #fingerprints: ["d6:ba:b7:75:6f:56:5c:94:b2:bc:d6:e6:6c:18:c0:c8"]
      #- run:
          #name: Install Ansible
          #command: |
            #install Ansible
            #apk add --update ansible
        
      #- run:
          #name: Run Playbook and Configure server
          #command: |
            #Your command
            #ansible-playbook -i inventory main-remote.yml

  #create_infrastructure:
    #docker:
      #- image: amazon/aws-cli
    #steps:
      #- checkout
      #- run:
          #name: Create Cloudformation Stack
          #command: |
            #aws cloudformation deploy \
              #--template-file template.yml \
              #--stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
              #--region us-east-1
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  myWorkflow:
    jobs:
      #- create_infrastructure
      #- smoke_test
      - create_and_deploy_front_end
      - promote_to_production:
          requires: 
            - create_and_deploy_front_end
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id
            - promote_to_production
